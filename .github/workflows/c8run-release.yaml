name: "C8Run: release"
on:
  workflow_dispatch:
    inputs:
      branch:
        description: "release branch of c8run to release (stable/8.7, main, etc.)"
        type: string
        required: true
        default: ""
      camundaVersion:
        description: "Camunda minor version in format x.y, x.y-rc, or alpha"
        type: string
        required: true
        default: ""
      camundaAppsRelease:
        description: "Name of the Camunda apps GH release"
        type: string
        required: true
        default: ""
      publishToCamundaAppsRelease:
        description: "Publish C8Run artifact to Camunda apps GH release too (by default C8Run has its own GH release)"
        type: boolean
        default: false

permissions:
  actions: read
  attestations: none
  checks: read
  contents: write
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: write

env:
  CAMUNDA_RUN_NAME: c8run-${{ inputs.camundaVersion }}

jobs:
  init:
    name: Create C8Run tag/release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      NEXUS_USERNAME: ${{ steps.secrets.outputs.NEXUS_PASSWORD }}
      NEXUS_PASSWORD: ${{ steps.secrets.outputs.NEXUS_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@7709c609789c5e27b757a85817483caadbb5939a # v3.3.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/distribution/ci NEXUS_USERNAME;
            secret/data/products/distribution/ci NEXUS_PASSWORD;
      - name: Clean up old release
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          gh release view ${{ env.CAMUNDA_RUN_NAME }} &&
            gh release delete ${{ env.CAMUNDA_RUN_NAME }} --cleanup-tag ||
            true
          # To avoid any race condition when the release is created again.
          sleep 5
      - name: Create new release
        run: |
          gh release create ${{ env.CAMUNDA_RUN_NAME }} --target ${{ inputs.branch }} \
            --notes "${{ env.CAMUNDA_RUN_NAME }}"
        env:
          GH_TOKEN: ${{ github.token }}

  release:
    needs: init
    name: C8Run - ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.id }}
    timeout-minutes: 15
    env:
      CAMUNDA_RUN_NAME_ARTIFACT_WITH_MINOR_VERSION: "camunda8-run-${{ inputs.camundaVersion }}-${{ matrix.os.artifactSuffix }}"
      CAMUNDA_RUN_NAME_ARTIFACT_WITH_PATCH_VERSION: "camunda8-run-${{ inputs.camundaAppsRelease }}-${{ matrix.os.artifactSuffix }}"
    strategy:
      fail-fast: false
      matrix:
        # macos-latest is ARM, mac os 13 will execute on x86 runner.
        os:
          - name: Ubuntu (AMD64)
            id: ubuntu-latest
            artifactSuffix: linux-x86_64.tar.gz
            workingDir: ./c8run
            command: ./c8run
          - name: MacOS (ARM64)
            id: macos-latest
            artifactSuffix: darwin-aarch64.tar.gz
            workingDir: ./c8run
            command: ./c8run
          - name: MacOS (AMD64)
            id: macos-13
            artifactSuffix: darwin-x86_64.tar.gz
            workingDir: ./c8run
            command: ./c8run
          - name: Windows (AMD64)
            id: windows-latest
            artifactSuffix: windows-x86_64.zip
            workingDir: .\c8run
            command: .\c8run.exe
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.23.1'
          cache: false  # disabling since not working anyways without a cache-dependency-path specified
      - name: Build artifact
        working-directory: ${{ matrix.os.workingDir }}
        shell: bash
        run: go build
      - name: Create artifact package
        working-directory: ${{ matrix.os.workingDir }}
        shell: bash
        run: ${{ matrix.os.command }} package
        env:
          JAVA_ARTIFACTS_USER: ${{ needs.init.outputs.NEXUS_USERNAME }}
          JAVA_ARTIFACTS_PASSWORD: ${{ needs.init.outputs.NEXUS_PASSWORD }}
      - name: Create artifact checksums
        working-directory: ${{ matrix.os.workingDir }}
        shell: bash
        run: |
          set -eoux
          artifact_file="${{ env.CAMUNDA_RUN_NAME_ARTIFACT_WITH_PATCH_VERSION }}"
          checksum_file="${artifact_file}.sha1sum"
          echo "# ${{ env.CAMUNDA_RUN_NAME_ARTIFACT_WITH_PATCH_VERSION }}" >> ${checksum_file}
          sha1sum "${artifact_file}" >> "${checksum_file}"
      - name: Copy artifact
        working-directory: ${{ matrix.os.workingDir }}
        shell: bash
        run: |
          # Artifact.
          cp -a ${{ env.CAMUNDA_RUN_NAME_ARTIFACT_WITH_PATCH_VERSION }} \
            ${{ env.CAMUNDA_RUN_NAME_ARTIFACT_WITH_MINOR_VERSION }}
          # Hash sum.
          cp -a ${{ env.CAMUNDA_RUN_NAME_ARTIFACT_WITH_PATCH_VERSION }}.sha1sum \
            ${{ env.CAMUNDA_RUN_NAME_ARTIFACT_WITH_MINOR_VERSION }}.sha1sum
      - name: Upload artifact to C8Run release
        working-directory: ${{ matrix.os.workingDir }}
        shell: bash
        run: |
          gh release upload "${{ env.CAMUNDA_RUN_NAME }}" \
            ${{ env.CAMUNDA_RUN_NAME_ARTIFACT_WITH_MINOR_VERSION }}*
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Upload artifact to Camuna apps release
        if: inputs.publishToCamundaAppsRelease
        working-directory: ${{ matrix.os.workingDir }}
        shell: bash
        run: |
          gh release upload "${{ inputs.camundaAppsRelease }}" \
            ${{ env.CAMUNDA_RUN_NAME_ARTIFACT_WITH_PATCH_VERSION }}*
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Add release URL to workflow summary
        shell: bash
        run: |
          release_url="https://github.com/camunda/camunda/releases/tag/${{ inputs.camundaAppsRelease }}"
          echo "⭐ Release URL: ${release_url}" >> $GITHUB_STEP_SUMMARY
