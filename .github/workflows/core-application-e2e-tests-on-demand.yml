name: Core Application E2E Tests On Demand
permissions:
  contents: read
  pull-requests: write
on:
  push:

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      services_ready: ${{ steps.wait-for-services.outputs.ready }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            software-properties-common

          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          DOCKER_COMPOSE_VERSION="v2.20.0"
          sudo curl -SL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set DATABASE environment variable
        run: echo "DATABASE=elasticsearch" >> $GITHUB_ENV

      - name: Start Tasklist and Operate
        run: |
          DATABASE=elasticsearch docker compose up -d tasklist operate
        working-directory: qa/core-application-e2e-test-suite/config

      - name: List running Docker containers
        run: docker ps -a
        working-directory: qa/core-application-e2e-test-suite/config

      - name: Capture logs for debugging
        run: |
          docker-compose logs --tail=50 tasklist
          docker-compose logs --tail=50 operate
        working-directory: qa/core-application-e2e-test-suite/config

      - name: Wait for services to be ready
        id: wait-for-services
        run: |
          echo "Checking if services are up..."
          ready=false
          for i in {1..90}; do
            if ! nc -zv localhost 8080; then
              echo "Port 8080 is not open yet..."
            fi

            if ! nc -zv localhost 8081; then
              echo "Port 8081 is not open yet..."
            fi

            # Check if tasklist page is available (adjust the URL based on your service)
            response_8080=$(curl -s -m 5 http://localhost:8080/tasklist || echo "Failed")
            response_8081=$(curl -s -m 5 http://localhost:8081/operate || echo "Failed")

            # Check if tasklist is up (you can adjust this condition based on actual response)
            if [[ "$response_8080" != "Failed" ]] && [[ "$response_8081" != "Failed" ]]; then
              echo "Services are ready!"
              ready=true
              break
            fi

            echo "Waiting for services... ($i/90)"
            echo "Response from 8080: $response_8080"
            echo "Response from 8081: $response_8081"
            sleep 10
          done

          if [ "$ready" == "true" ]; then
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "Services failed to start in time."
            exit 1
          fi

      - name: Print Docker logs before failing
        if: failure()
        run: |
          docker-compose logs tasklist
          docker-compose logs operate
        working-directory: qa/core-application-e2e-test-suite/config

  core-component-tests:
    needs: setup-environment
    runs-on: ubuntu-latest
    if: needs.setup-environment.outputs.services_ready == 'true'
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        project: ["chromium"]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: qa/core-application-e2e-test-suite/package-lock.json

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --verbose
        working-directory: qa/core-application-e2e-test-suite

      - name: Run tests
        uses: ./.github/actions/core-application-e2e-test-suite
